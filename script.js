// --- Python Script Generation (REVISED for Compositing) ---

function generatePythonScript(filenames) {
    // Escape backticks and dollar signs in filenames for the template literal
    const safeFilenames = filenames.map(name => name.replace(/`/g, '\\`').replace(/\$/g, '\\$'));

    // Convert the safe filenames array into a Python list string representation
    const pythonFilenamesList = `[${safeFilenames.map(name => `"${name.replace(/"/g, '\\"')}"`).join(', ')}]`; // Ensure quotes inside filenames are escaped for Python

    // --- Configuration for Composite Video ---
    const clipWidth = 480;      // Width of each individual clip frame in pixels
    const clipBorder = 10;       // Border width around each clip frame
    const borderColor = '(200, 200, 200)'; // Border color (RGB tuple as string)
    const imageDuration = 7;     // Duration for static images in seconds
    const totalDuration = Math.max(imageDuration, 10); // Minimum total duration, extend if needed based on video lengths later? Maybe keep fixed for now.
    const targetWidth = 1920;    // Output video width (1080p)
    const targetHeight = 1080;   // Output video height (1080p)
    const outputFps = 30;
    const outputFilename = "composite_output_1080p.mp4";
    const backgroundColor = '(15, 15, 15)'; // Dark background color (RGB tuple as string)
    // ---

    // Use template literals for the Python script
    return `
# Python Script for Google Colab Video Generation (Composite Style)
# Generated by Web Preview App

# IMPORTANT: Before running, upload the EXACT SAME files listed below
#            to your Colab session's file directory!

# ----------------------------------------
# 1. Setup Environment
# ----------------------------------------
print("Installing necessary libraries...")
!pip install moviepy==1.0.3 numpy==1.23.5 # Pin numpy for compatibility if needed with Colab's default
print("Installation complete.")
print("-" * 40)

# ----------------------------------------
# 2. Import Libraries
# ----------------------------------------
import os
import random
import traceback
from moviepy.editor import *
import numpy as np # Needed for color clips and positioning

print("Libraries imported.")
print("-" * 40)

# ----------------------------------------
# 3. Configuration
# ----------------------------------------
source_filenames = ${pythonFilenamesList}

CLIP_WIDTH_PX = ${clipWidth}
CLIP_BORDER_PX = ${clipBorder}
BORDER_COLOR_RGB = ${borderColor} # e.g., (255, 255, 255) for white
IMAGE_DURATION_SECONDS = ${imageDuration}
TOTAL_VIDEO_DURATION = ${totalDuration} # Approximate total duration
TARGET_WIDTH = ${targetWidth}
TARGET_HEIGHT = ${targetHeight}
OUTPUT_FPS = ${outputFps}
OUTPUT_FILENAME = "${outputFilename}"
BACKGROUND_COLOR_RGB = ${backgroundColor} # e.g., (0, 0, 0) for black

# Add more extensions if needed (case-insensitive)
IMAGE_EXTENSIONS = ['.png', '.jpg', '.jpeg', '.webp', '.bmp'] # Avoid GIF for simple compositing unless specific handling added
VIDEO_EXTENSIONS = ['.mp4', '.mov', '.avi', '.mkv', '.webm']

print("Configuration:")
print(f" - Source Files: {len(source_filenames)} items")
print(f" - Clip Frame Width: {CLIP_WIDTH_PX}px")
print(f" - Clip Border: {CLIP_BORDER_PX}px")
print(f" - Image Duration: {IMAGE_DURATION_SECONDS}s")
print(f" - Target Resolution: {TARGET_WIDTH}x{TARGET_HEIGHT}")
print(f" - Output FPS: {OUTPUT_FPS}")
print(f" - Output Filename: {OUTPUT_FILENAME}")
print("-" * 40)

# ----------------------------------------
# 4. Processing Logic
# ----------------------------------------
processed_clips_for_composite = []
files_missing = []
files_processed = []
files_failed = []

# --- Define potential positions ---
# Example: Define some fixed positions or generate random ones
# More sophisticated layout logic can be added here.
possible_positions = [
    ('center', 'center'),
    (0.1, 0.1), # Relative position (10% from left, 10% from top)
    (0.6, 0.1),
    (0.1, 0.6),
    (0.6, 0.6),
    ('center', 0.2),
    ('center', 0.7),
    (0.2, 'center'),
    (0.7, 'center'),
]
random.shuffle(possible_positions) # Randomize the order
position_index = 0

print("Starting processing for composite video...")

for idx, filename in enumerate(source_filenames):
    print(f"Processing: {filename}...")
    if not os.path.exists(filename):
        print(f"  ERROR: File not found in Colab environment: {filename}")
        files_missing.append(filename)
        continue

    try:
        _, ext = os.path.splitext(filename.lower())
        clip = None

        if ext in IMAGE_EXTENSIONS:
            print(f"  Type: Image")
            clip = ImageClip(filename).set_duration(IMAGE_DURATION_SECONDS)
            # Resize image based on desired width, maintain aspect ratio
            clip = clip.resize(width=CLIP_WIDTH_PX)
            clip = clip.set_fps(OUTPUT_FPS) # Set FPS for consistency

        elif ext in VIDEO_EXTENSIONS:
            print(f"  Type: Video")
            # Load video and resize based on width
            clip = VideoFileClip(filename, target_resolution=(None, 10000)) # Load full res first
            clip = clip.resize(width=CLIP_WIDTH_PX)
            # Trim or loop video if its duration is different from desired segment duration
            # For now, let's just use its original duration, capped by total duration maybe?
            # clip = clip.subclip(0, min(clip.duration, IMAGE_DURATION_SECONDS)) # Example: Trim video clips too

        else:
            print(f"  WARNING: Unsupported file type: {filename} - Skipping")
            files_failed.append(f"{filename} (Unsupported type)")
            continue

        # Add border using margin
        print(f"  Adding border: {CLIP_BORDER_PX}px")
        clip = clip.margin(all=CLIP_BORDER_PX, color=BORDER_COLOR_RGB)

        # Assign position
        # Cycle through positions, or use random if more files than positions
        if position_index >= len(possible_positions):
             pos = (random.uniform(0.05, 0.7), random.uniform(0.05, 0.7)) # Random fallback position
             print(f"  Assigning random position: {pos}")
        else:
            pos = possible_positions[position_index]
            print(f"  Assigning position: {pos}")
            position_index += 1

        # Set position relative to the main canvas size
        clip = clip.set_position(pos, relative=True)

        # Set start time (for now, all start at 0, could be staggered)
        clip = clip.set_start(0) # All clips start immediately

        # Set duration (use image duration or video's natural duration)
        # Ensure clip doesn't exceed TOTAL_VIDEO_DURATION (optional)
        clip = clip.set_duration(min(clip.duration, TOTAL_VIDEO_DURATION))

        processed_clips_for_composite.append(clip)
        files_processed.append(filename)
        print(f"  Successfully prepared: {filename}")

    except Exception as e:
        print(f"  ERROR processing file {filename}: {e}")
        print(traceback.format_exc())
        files_failed.append(f"{filename} (Processing error)")

print("-" * 40)

# ----------------------------------------
# 5. Create Background and Composite
# ----------------------------------------
if not processed_clips_for_composite:
    print("ERROR: No clips were successfully processed. Cannot create video.")
else:
    print("Creating background clip...")
    # Simple colored background
    background_clip = ColorClip(size=(TARGET_WIDTH, TARGET_HEIGHT),
                                color=BACKGROUND_COLOR_RGB,
                                ismask=False,
                                duration=TOTAL_VIDEO_DURATION) # Duration must match the composite

    # Add more complex background here later if needed (e.g., animated squares)
    # For now, just the color.

    print(f"Compositing {len(processed_clips_for_composite)} clips onto background...")
    # Layer clips onto the background. Order matters if they overlap.
    # Background should be first in the list.
    final_clip = CompositeVideoClip([background_clip] + processed_clips_for_composite,
                                    size=(TARGET_WIDTH, TARGET_HEIGHT))

    # Set the duration of the final composite clip explicitly
    final_clip = final_clip.set_duration(TOTAL_VIDEO_DURATION)

    print(f"Writing final composite video to: {OUTPUT_FILENAME} (This may take time)...")
    try:
        final_clip.write_videofile(
            OUTPUT_FILENAME,
            fps=OUTPUT_FPS,
            codec='libx264',
            audio_codec='aac',
            preset='medium',
            threads=4
        )
        print("-" * 40)
        print(f"SUCCESS! Composite video saved as {OUTPUT_FILENAME}.")

        # Clean up memory
        print("Closing clips...")
        # It's crucial to close clips, especially in memory-constrained environments like Colab
        try:
            background_clip.close()
        except: pass
        for clip in processed_clips_for_composite:
             try:
                 clip.close()
             except: pass
        try:
            final_clip.close()
        except: pass
        import gc
        gc.collect() # Suggest garbage collection

    except Exception as e:
        print(f"ERROR during final compositing or export: {e}")
        print(traceback.format_exc())


print("-" * 40)
print("Script finished.")

# Summary Report (same as before)
# ... [rest of summary report code] ...
print("\\n--- Processing Summary ---")
print(f"Total files selected: {len(source_filenames)}")
print(f"Successfully processed: {len(files_processed)}")
if files_processed: print(f"  {files_processed}")
print(f"Missing files (not found in Colab): {len(files_missing)}")
if files_missing: print(f"  {files_missing}")
print(f"Failed/Skipped files: {len(files_failed)}")
if files_failed: print(f"  {files_failed}")
print("--------------------------")
`; // End of template literal
}
